package com.CognitiveBox {	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.Graphics;		public class TopicList extends MovieClip {				private var topicMC:MovieClip;		private var topicTxt:TextField;		public var greenLight:Sprite;		public var redLight:Sprite;		private var txtFormat:TextFormat;		private var rowIndex:int;		private var colIndex:int;		private var slideIndex:int;		public function TopicList() {			init();		}				private function init():void {			addToList();		}				private function addToList():void {			topicMC = new MovieClip();						topicMC.mouseChildren = false;						addChild(topicMC);		}				public function insertContent(t:String,bt:Boolean = false):void {			topicTxt = new TextField();						setTxtProperties(bt);			topicTxt.text = t;			topicMC.addChild(topicTxt);			if (bt == false) {				drawLights();				topicMC.addEventListener(MouseEvent.MOUSE_OVER, doMouseOver);			}		}				public function setRowColIndex(r:int,c:int, i:int):void {			rowIndex = r;			colIndex = c;			slideIndex = i;		}				public function getRowColIndex():String {			var rowColIndex:String;			rowColIndex = rowIndex.toString() + colIndex.toString();			return rowColIndex;		}				public function getRowIndex():int {			return rowIndex;		}				public function getColIndex():int {			return colIndex;		}				public function getSlideIndex():int {			return slideIndex;		}				private function drawLights():void {			greenLight = new Sprite();			greenLight.graphics.lineStyle(1,0x000000,1);			greenLight.graphics.beginFill(0x00FF00,1);			greenLight.graphics.drawCircle(0,0,5);			greenLight.x = 10;			greenLight.y = 9;			greenLight.alpha = .10;			topicMC.addChild(greenLight);						redLight = new Sprite();			redLight.graphics.lineStyle(1,0x000000,1);			redLight.graphics.beginFill(0xFF0000,1);			redLight.graphics.drawCircle(0,0,5);			redLight.x = greenLight.x + greenLight.width + 5;			redLight.y = greenLight.y;			redLight.alpha = 1;			topicMC.addChild(redLight);		}						private function setTxtProperties(bt:Boolean = false):void {						if (bt == true) {				txtFormat = new TextFormat();				txtFormat.align = "left";				txtFormat.color = "0x000000";				txtFormat.size = 12;				txtFormat.font = "Arial, Helvetica, sans-serif";				txtFormat.bold = true;								topicTxt.defaultTextFormat = txtFormat;				topicTxt.multiline = false;				topicTxt.wordWrap = false;				topicTxt.condenseWhite = true;				topicTxt.selectable = false;				topicTxt.mouseEnabled = false;				topicTxt.autoSize = TextFieldAutoSize.LEFT;				topicTxt.x = 0;			} else {				txtFormat = new TextFormat();				txtFormat.align = "left";				txtFormat.color = "0x000000";				txtFormat.size = 12;				txtFormat.font = "Arial, Helvetica, sans-serif";								topicTxt.defaultTextFormat = txtFormat;				topicTxt.multiline = true;				topicTxt.wordWrap = true;				topicTxt.condenseWhite = true;				topicTxt.selectable = false;				topicTxt.mouseEnabled = false;				topicTxt.autoSize = TextFieldAutoSize.LEFT;				topicTxt.x = 35;				topicTxt.width = 220;			}					}				private function doMouseOver(event:MouseEvent):void {			topicTxt.textColor = 0x54A3DA;			topicMC.addEventListener(MouseEvent.MOUSE_OUT, doMouseOut);		}				private function doMouseOut(event:MouseEvent):void {			topicTxt.textColor = 0x000000;			topicMC.removeEventListener(MouseEvent.MOUSE_OUT, doMouseOut);		}	}	}