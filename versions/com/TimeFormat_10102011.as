package com.Utils{	/*****************************************************************	* 	Time format class by Ethan S. Lin, October 07, 2011          *	*	Visit www.ethanslin.com for Ethan's portfolio.               *	* 	You may not distribute this code freely without permission.  *	*****************************************************************/	public class TimeFormat	{						/**********************************************		* RETURN INPUTED TIME INTO HH:MM:SS FORMAT    *		* with optional agrument of extending the     *		* time output as HOUR(S) MINUTE(S) SECONDS(S) *		**********************************************/		public static function toHMS(from:String,time:Number,extend:Boolean=false):String		{			if (validateNumInput(time) == false) {				return "Invalid time value. Must be a number and greater than zero (0).";			} else {				return formatToHMS(from,time,extend);			}					}						/**********************************************************		* RETURN TIME IN HH:MM:SS FORMAT TO USER SPECIFIED FORMAT *		**********************************************************/				private static function fromHMS(to:String,timeInHMS:String):Number {			return 0; // work in progress		}								/**************************************************************************		* RETURN USER SPECIFIED TIME FORMAT TO ANOTHER USER SPECIFIED TIME FORMAT *		**************************************************************************/				private static function into(from:String,to:String,time:Number):Number {			return 0; // work in progress		}														/*************************STOP**************************/		/********************************************************		* METHODS TO BE USED FOR THIS CLASS -DO NOT EDIT BELOW- *		********************************************************/		/*************************STOP**************************/				private static function validateNumInput(num:Number):Boolean {			if (num <= 0 || isNaN(num)) {				return false;			} else {				return true;			}		}				private static function formatToHMS(from:String,time:Number,extend:Boolean):String {									if (validateFromInput(from) == false) {				return "TIME FORMAT ERROR: invalid \"from\" argument. Check your spelling. Accepted string values: milliseconds, millisecond, ms, seconds, second, s, minutes, minute, m, hours, hour, and h.";			} else {				return HMS(from,time,extend);			}					}				private static function validateFromInput(from:String):Boolean {			if (from == "milliseconds" || from == "ms" || from == "millisecond") {				return true;			} else if (from == "seconds" || from == "s" || from == "second") {				return true;			} else if (from == "minutes" || from == "m" || from == "minute" ) {				return true;			} else if (from == "hours" || from == "h" || from == "hour") {				return true;			} else {				return false;			}		}				private static function HMS(from:String,time:Number,extend:Boolean):String {			var hours:Number;			var remainder:Number;			var minutes:Number;			var seconds:Number;			var hString:String;			var mString:String;			var sString:String;						if (from == "milliseconds" || from == "ms" || from == "millisecond") {				hours = time / (60 * 60 * 1000);			} else if (from == "seconds" || from == "s" || from == "second") {				hours = time / (60 * 60);			} else if (from == "minutes" || from == "m" || from == "minute" ) {				hours = time / 60;			} else if (from == "hours" || from == "h" || from == "hour") {				hours = time;			}						remainder = hours - (Math.floor(hours));			hours = Math.floor(hours);			minutes = remainder * 60;			remainder = minutes - (Math.floor(minutes));			minutes = Math.floor(minutes);						if (minutes == 60) {				hours += 1;				minutes = 0;			}			seconds = remainder * 60;			remainder = seconds - (Math.floor(seconds));			seconds = Math.round(seconds);						if (seconds == 60) {				minutes += 1;				seconds = 0;			}			hString = hours < 10 ? "0" + hours:"" + hours;			mString = minutes < 10 ? "0" + minutes:"" + minutes;			sString = seconds < 10 ? "0" + seconds:"" + seconds;					if (extend == false) {				if (hours > 0) {					return hString + ":" + mString + ":" + sString;				} else {					return mString + ":" + sString;				}			} else {				return getExtended(hours,minutes,seconds,hString,mString,sString);			}		}				private static function getExtended(h:Number,m:Number,s:Number,hS:String,mS:String,sS:String):String {			var nHour:String;			var nMin:String;			var nSec:String;											nHour = h > 1 ? " HOURS ":" HOUR ";			nMin = m > 1 ? " MINUTES ":" MINUTE ";			nSec = s > 1 ? " SECONDS ":" SECOND ";						if (h > 0) {				if (m <= 0 && s > 0) {					return hS + nHour + sS + nSec;				} else if (s <= 0 && m > 0) {					return hS + nHour + mS + nMin;				} else if (m <= 0 && s <= 0) {					return hS + nHour;				} else {					return hS + nHour + mS + nMin + sS + nSec;				}			} else if (h <= 0 && m <= 0) {				return sS + nSec;			} else if (h <= 0 && s <= 0) {				return mS + nMin;			} else if (m <= 0 && s <= 0) {				return hS + nHour;			} else {				return mS + nMin + sS + nSec;			}		}			}}